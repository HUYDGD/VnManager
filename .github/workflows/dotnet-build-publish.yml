# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#


name: Build
on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]


jobs:

  #Build Job for prepping the environment for build (installing .net core, getting nuget packages,...
  build:
    name: Publish VnManager
    runs-on: windows-2019                             
    env:
      Solution_Name: src/VnManager.sln                         
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true


    - name: Check For Tags
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        echo "A tag was found"  

    - name: Check For No Tags
      if: startsWith(github.ref, 'refs/tags/') == false
      run: |
        echo "This will fail as not tag was found"  


    - name: Setup Java 11
      uses: actions/setup-java@v1
      with:
        java-version: '11.x.x'
        java-package: jdk
        architecture: x64

    - name: Cache NuGet Packages
      uses: actions/cache@v1
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-
          
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner   

    - name: Install SonarCloud scanner
      if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
          
    - name: Create Output Directories
      run: |
        mkdir ${{ github.workspace }}/output/setup
        mkdir ${{ github.workspace }}/output/build
        xcopy /E /I ${{ github.workspace }}\setup ${{ github.workspace }}\output\setup
        
    - name: Build VnManager
      run: |
        dotnet restore
        dotnet publish src/VnManager/VnManager.csproj --framework netcoreapp3.1 -c Release -o --output "${{ github.workspace }}/output/build"         
        
    - name: Rebuild and Analyze
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        mkdir ${{ github.workspace }}/build
        dir ${{ github.workspace }}
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"micah686_VnManager" /o:"micah686" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet publish src/VnManager/VnManager.csproj --framework netcoreapp3.1 -c Release
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
    - name: Create Code Signing Certificate
      run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CERTIFICATE }}'
          certutil -decode certificate\certificate.txt ${{ github.workspace }}\output\setup\certificate.pfx     
          
    - name: Code Sign VnManager binaries
      run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /f ${{ github.workspace }}\output\setup\certificate.pfx /p '${{ secrets.CERTIFICATE_PASS }}' /t http://timestamp.digicert.com "${{ github.workspace }}/output/build/VnManager.exe"
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /fd sha256 /f ${{ github.workspace }}\output\setup\certificate.pfx /p '${{ secrets.CERTIFICATE_PASS }}' /t http://timestamp.digicert.com "${{ github.workspace }}/output/build/VnManager.dll"          
                  
              
    - name: Install and compile Inno
      shell: powershell
      run: |
        cd ${{ github.workspace }}\output\setup
        iscc "VnManagerSetup.iss" 
        
        
          
    - name: Check github refs
      run: |
        echo "The ref is ${{ github.ref }}"
      
    - name: Upload Artifact Build
      uses: actions/upload-artifact@v1
      with:
        name: VnManager-Build
        path:  "${{ github.workspace }}/output/build/"   
        
    - name: Upload Artifact Setup
      uses: actions/upload-artifact@v1
      with:
        name: VnManager-Setup
        path:  "${{ github.workspace }}/output/setup/"         
        
                
###################################
# Everything below is only for tagged Releases
##################################                      
                
    - name: Create Release
      #if: startsWith(github.ref, 'refs/tags/')
      id: create_release #Don't touch this ID
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
       tag_name: ${{ github.ref }}
       release_name: Release ${{ github.ref }}
       draft: false
       prerelease: false
      
    - name: Upload Release Asset      
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ${{ github.workspace }}/output/setup/Output/VnManagerSetup.exe
        asset_name: VnManagerSetup.exe
        asset_content_type: application/vnd.microsoft.portable-executable
      
      
      
      
      
        
       
