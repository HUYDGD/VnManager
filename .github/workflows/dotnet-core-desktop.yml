# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# This workflow will build, test, sign and package a WPF or Windows Forms desktop application
# built on .NET Core.
# To learn how to migrate your existing application to .NET Core,
# refer to https://docs.microsoft.com/en-us/dotnet/desktop-wpf/migration/convert-project-from-net-framework
#


name: Main CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:

  #Build Job for prepping the environment for build (installing .net core, getting nuget packages,...
  prep:
    name: Prep for Build
    runs-on: windows-latest                             
    env:
      Solution_Name: src/VnManager.sln                         
      
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: true

    - name: Cache NuGet Packages
      uses: actions/cache@v1
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Setup Java JDK
      uses: actions/setup-java@v1.3.0
      with:
        java-version: 11.x

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101    

    

  #Build Job for building and uploading the actual project
  build:
    name: Build Project
    runs-on: windows-latest                             
    env:
      Solution_Name: src/VnManager.sln                         
      
    steps:
       # Install the .NET Core workload
    - name: Build VnManager
      run: |
        mkdir ${{ github.workspace }}/build
        mkdir ${{ github.workspace }}/staging
        dotnet publish src/VnManager/VnManager.csproj --framework netcoreapp3.1 -c Release -o --output "${{ github.workspace }}/build"
        
    - name: Upload Artifact
      uses: actions/upload-artifact@v1
      with:
        name: VnManager
        path:  "${{ github.workspace }}/build/"

    
    
  #Build Job for running scans and tests  
  test-scans:
    name: Tests and Scans
    runs-on: windows-latest



    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    #- name: Setup MSBuild.exe
    #  uses: microsoft/setup-msbuild@2008f912f56e61277eefaac6d1888b750582aa16

    # Execute all unit tests in the solution
    #- name: Execute unit tests
    #  run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
  #  - name: Restore the application
  #    run: msbuild $env:Solution_Name /t:Restore /p:Configuration=$env:Configuration
  #    env:
  #      Configuration: ${{ matrix.configuration }}

   
