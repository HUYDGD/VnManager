<UserControl x:Class="VnManager.Views.Dialogs.AddGameSources.AddGameVndbView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:VnManager.Views.Dialogs.AddGameSources"
             xmlns:res="clr-namespace:VnManager.Strings"
             xmlns:s="https://github.com/canton7/Stylet"
             xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
             xmlns:controls="clr-namespace:AdonisUI.Controls;assembly=AdonisUI"
             xmlns:adonisUi="clr-namespace:AdonisUI;assembly=AdonisUI"
             xmlns:ex="clr-namespace:VnManager.Extensions"
             xmlns:conv="clr-namespace:VnManager.Converters"
             xmlns:mvd="https://github.com/fantasticfiasco/mvvm-dialogs"
             xmlns:vm ="clr-namespace:VnManager.ViewModels.Dialogs.AddGameSources"
             mvd:DialogServiceViews.IsRegistered="True"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance vm:AddGameVndbViewModel}"
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <conv:InverseBoolConverter x:Key="InverseBoolConverter"/>
    </UserControl.Resources>
    <Grid IsEnabled="{Binding IsLockDown, Converter={StaticResource InverseBoolConverter}}">
        <Grid.Resources>
            <s:BoolToVisibilityConverter x:Key="BoolToVisConverter" TrueVisibility="Visible" FalseVisibility="Hidden"/>
            <conv:EnumToBooleanConverter x:Key="EnumToBooleanConverter"/>
            <conv:BooleanAndConverter x:Key="BooleanAndConverter"/>
            <conv:IntToStringConverter x:Key="IntToStringConverter"/>
            
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
        </Grid.RowDefinitions>

        <TextBlock Grid.Row="0" Text="{x:Static res:Resources.AddGameFillInInfo}" Margin="0,15,0,15"/>
        
        <Grid  Grid.Row="1" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="{x:Static res:Resources.VndbIdOrName}" Width="100" FontStyle="Normal"/>
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="5,0,0,0" >
                <RadioButton x:Name="VnIdRadio" Content="{x:Static res:Resources.Id}" Margin="0,0,5,0"  IsChecked="True"/>
                <RadioButton x:Name="VnNameRadio" Content="{x:Static res:Resources.Name}" Margin="10,0,0,0" IsChecked="{Binding IsNameChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            </StackPanel>
        </Grid>

        
        <Grid Grid.Row="2" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel Grid.Column="0" Orientation="Horizontal" Visibility="{Binding IsChecked, ElementName=VnIdRadio, Converter={StaticResource BoolToVisConverter}}">
                <TextBlock Text="{Binding VnIdOrName}" Margin="0,5,0,0"/>
                <TextBox Width="150" MaxLength="10" Height="25" ex:TextBoxExtensions.IsNumericOnly="True" Grid.ColumnSpan="2" Margin="10,0,0,0" Text="{Binding VnId, Converter={StaticResource IntToStringConverter}}" />
            </StackPanel>

            <StackPanel Grid.Column="0" Orientation="Horizontal" Visibility="{Binding IsChecked, ElementName=VnNameRadio, Converter={StaticResource BoolToVisConverter}}">
                <TextBlock  Text="{Binding VnIdOrName}" Margin="0,5,0,0"/>
                <ComboBox Width="150" Height="25" IsEditable="{Binding CanChangeVnName, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Margin="10,0,0,0" Text="{Binding VnName}"
                                  ItemsSource="{Binding SuggestedNamesCollection, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" IsDropDownOpen="{Binding IsNameDropDownOpen, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                                  SelectedItem="{Binding SelectedName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedIndex="{Binding DropDownIndex, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.Resources>
                        <Style TargetType="{x:Type TextBox}">
                            <Setter Property="MaxLength" Value="70"/>
                        </Style>
                    </ComboBox.Resources>
                </ComboBox>
                <Button Margin="5,0,0,0" Command="{s:Action SearchAsync}" IsEnabled="{Binding IsSearchNameButtonEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconMaterial Kind="{x:Static iconPacks:PackIconMaterialKind.Magnify}"  />
                </Button>
                <Button Margin="5,0,0,0" Command="{s:Action ResetName}" IsEnabled="{Binding IsResetNameButtonEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
                    <iconPacks:PackIconMaterial Kind="{x:Static iconPacks:PackIconMaterialKind.Restore}"  />
                </Button>
                <ContentControl ContentTemplate="{DynamicResource {x:Static adonisUi:Templates.LoadingBars}}" Width="16" Height="16" Focusable="False" Margin="5,0,0,0" Visibility="{Binding IsSearchingForNames, Converter={StaticResource BoolToVisConverter}}"/>
            </StackPanel>

        </Grid>

        
        <Grid Grid.Row="3" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="{x:Static res:Resources.ExeTypeColon}"/>
            <StackPanel Grid.Column="1" Orientation="Horizontal" Margin="5,0,0,0">
                <RadioButton Content="{x:Static res:Resources.Normal}" Margin="5,0,0,0" IsChecked="{Binding ExeType, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Normal}"/>
                <iconPacks:PackIconMaterial Kind="{x:Static iconPacks:PackIconMaterialKind.HelpCircleOutline}" Margin="3,1,0,0" Height="14" Width="14" ToolTip="{x:Static res:Resources.AddGameNormalTooltip}"/>
                <RadioButton Content="{x:Static res:Resources.Launcher}" Margin="5,0,0,0" IsChecked="{Binding ExeType, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Launcher}"/>
                <iconPacks:PackIconMaterial Kind="{x:Static iconPacks:PackIconMaterialKind.HelpCircleOutline}" Margin="3,1,0,0" Height="14" Width="14" ToolTip="{x:Static res:Resources.AddGameLauncherTooltip}"/>
                <RadioButton x:Name="ExeCollectionRadio" Content="{x:Static res:Resources.Collection}" Margin="5,0,0,0" IsChecked="{Binding ExeType, Mode=TwoWay, Converter={StaticResource EnumToBooleanConverter}, ConverterParameter=Collection}" />
                <iconPacks:PackIconMaterial Kind="{x:Static iconPacks:PackIconMaterialKind.HelpCircleOutline}" Margin="3,1,0,0" Height="14" Width="14" ToolTip="{x:Static res:Resources.AddGameCollectionTooltip}"/>
            </StackPanel>
        </Grid>


        
        <Grid Grid.Row="4" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <StackPanel Orientation="Horizontal" >
                <StackPanel.Style>
                    <Style TargetType="StackPanel">
                        <Setter Property="Visibility" Value="Hidden"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding ExeType}" Value="Normal">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ExeType}" Value="Launcher">
                                <Setter Property="Visibility" Value="Visible"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </StackPanel.Style>
                <TextBlock Text="{x:Static res:Resources.PathColon}" Width="40"/>
                <TextBox Grid.Column="1"  Width="300" IsReadOnly="True" IsReadOnlyCaretVisible="True" Text="{Binding ExePath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                <Button Grid.Column="2" Content="{x:Static res:Resources.Browse}" Margin="5,0,0,0" Command="{s:Action BrowseExe}"/>
            </StackPanel>
            <StackPanel Grid.Column="0" Orientation="Horizontal" Visibility="{Binding IsChecked, ElementName=ExeCollectionRadio, Converter={StaticResource BoolToVisConverter}}">
                <Button Content="{x:Static res:Resources.ManageExecutables}" Width="150" Command="{s:Action ManageExes}"/>
            </StackPanel>

        </Grid>


        
        <Grid Grid.Row="5" Margin="0,0,0,15">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <CheckBox Grid.Column="0" x:Name="ChkCustomIco" Content="{x:Static res:Resources.EnableCustomIcon}" Margin="10,0,0,0" IsChecked="{Binding IsIconChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                              IsEnabled="{Binding IsNotExeCollection}"/>
            <CheckBox Grid.Column="1" x:Name="ChkCustomArg" Content="{x:Static res:Resources.EnableCustomArgs}" Margin="10,0,0,0" IsChecked="{Binding IsArgsChecked, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                              IsEnabled="{Binding IsNotExeCollection}"/>
        </Grid>


        
        <Grid Grid.Row="6" Margin="0,0,0,15">
            <Grid.IsEnabled>
                <MultiBinding Converter="{StaticResource BooleanAndConverter}">
                    <Binding ElementName="ChkCustomIco" Path="IsChecked"/>
                </MultiBinding>
            </Grid.IsEnabled>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="{x:Static res:Resources.IconColon}" Width="60" Margin="0,3,0,0"/>
            <TextBox Grid.Column="1"  Width="300" IsReadOnly="True" IsReadOnlyCaretVisible="True" Text="{Binding IconPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
            <Button Grid.Column="2" Content="{x:Static res:Resources.Browse}" Margin="5,0,0,0" Command="{s:Action BrowseIcon}" />
        </Grid>



        <Grid Grid.Row="7" Margin="0,0,0,15">
            <Grid.IsEnabled>
                <MultiBinding Converter="{StaticResource BooleanAndConverter}">
                    <Binding ElementName="ChkCustomArg" Path="IsChecked"/>
                </MultiBinding>
            </Grid.IsEnabled>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="{x:Static res:Resources.ArgsColon}" Width="70" Margin="0,2,0,0" IsEnabled="False"/>
            <TextBox Grid.Column="1"  Width="350" MaxLength="300" Text="{Binding ExeArguments, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" 
                             IsEnabled="{Binding IsNotExeCollection}"/>

        </Grid>



        <Grid Grid.Row="8" Margin="0,5,0,10">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>
            <Button Width="100" Height="30" Content="{x:Static res:Resources.Submit}" Command="{s:Action SubmitAsync}" Style="{DynamicResource {x:Static adonisUi:Styles.AccentButton}}"/>
            <Button Width="85" Height="25" Grid.Column="1" Content="{x:Static res:Resources.Cancel}" Command="{s:Action Cancel}" Margin="10,0,0,0"/>
        </Grid>

    </Grid>
</UserControl>
